import os
import re
import logging
import glob
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters
from yt_dlp import YoutubeDL
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users.txt"

def save_user(chat_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç."""
    try:
        if not os.path.exists(USERS_FILE):
            open(USERS_FILE, "w").close()

        with open(USERS_FILE, "a+") as file:
            file.seek(0)
            users = file.read().splitlines()
            if str(chat_id) not in users:
                file.write(f"{chat_id}\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def start_command(update: Update, context):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è –ó–∞–≥—Ä—É–∂–∞—Ç–µ–ª—å! üé¨\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Reels –∏–∑ Instagram ‚Äî –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–±–µ –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç.\n\n"
        "–Ø —É–º–µ—é –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑:\n"
        "üìå Instagram\n"
        "üìå YouTube\n"
        "üìå TikTok\n"
        "üìå VK Clips\n\n"
        "–ê –µ—â—ë ‚Äî –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –º—É–∑—ã–∫—É, –µ—Å–ª–∏ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ê—Ä—Ç–∏—Å—Ç - –¢—Ä–µ–∫`",
        parse_mode='Markdown'
    )

async def get_users_count(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /users: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID)."""
    if update.message.chat_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        if not os.path.exists(USERS_FILE):
            users_count = 0
        else:
            with open(USERS_FILE, "r") as file:
                users_count = len(file.readlines())

        await update.message.reply_text(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

def get_video_info(url: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    ydl_opts = {
        'quiet': True,
        'simulate': True,  # –ù–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ
        'skip_download': True,
    }
    with YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(url, download=False)
    return info_dict

def download_video(url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞."""
    info_dict = get_video_info(url)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ
    max_duration = 600  # 10 –º–∏–Ω—É—Ç
    if info_dict.get('duration', 0) > max_duration:
        raise ValueError(f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º: {max_duration // 60} –º–∏–Ω—É—Ç.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ
    max_size_mb = 48  # –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (MB)
    file_size_bytes = info_dict.get('filesize') or info_dict.get('filesize_approx')

    if file_size_bytes:
        file_size_mb = file_size_bytes / (1024 * 1024)
        if file_size_mb > max_size_mb:
            raise ValueError(f"–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ {file_size_mb:.2f}MB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {max_size_mb}MB!")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    video_id = info_dict['id']
    outtmpl = f"{video_id}.%(ext)s"

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    ydl_opts = {
        'format': 'best',
        'outtmpl': outtmpl,
        'quiet': True,
    }

    with YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    # –ü–æ–∏—Å–∫ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ª—é–±—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    downloaded_files = glob.glob(f"{video_id}.*")
    if not downloaded_files:
        raise FileNotFoundError(f"–§–∞–π–ª {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")

    return downloaded_files[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É

def download_music(query: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º—É–∑—ã–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ MP3."""
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': '%(title)s.%(ext)s',
        'quiet': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }
    with YoutubeDL(ydl_opts) as ydl:
        try:
            info_dict = ydl.extract_info(f"ytsearch:{query}", download=True)
            if not info_dict.get('entries'):
                raise Exception("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            audio_filename = ydl.prepare_filename(info_dict['entries'][0]).replace(".webm", ".mp3").replace(".m4a", ".mp3")
            return audio_filename
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º—É–∑—ã–∫–∏: {e}")
            raise

async def handle_message(update: Update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ/–º—É–∑—ã–∫—É."""
    if update.message is None or update.message.text is None:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    text = update.message.text
    chat_id = update.message.chat_id

    save_user(chat_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    instagram_pattern = re.compile(r'https?://(www\.)?instagram\.com')
    tiktok_pattern = re.compile(r'https?://(www\.)?tiktok\.com|https?://vt\.tiktok\.com')
    youtube_pattern = re.compile(r'https?://(www\.)?youtube\.com|https?://youtu\.be')
    vk_pattern = re.compile(r'https?://(www\.)?vk\.com|https?://vk\.cc|https?://vkvideo\.ru')

    music_pattern = re.compile(r'^(\w{2,}(\s+\w{2,}){0,3})\s+-\s+(\w{2,}(\s+\w{2,}){0,3})$')

    if (instagram_pattern.match(text) or tiktok_pattern.match(text) or
        youtube_pattern.match(text) or vk_pattern.match(text)):
        try:
            video_filename = download_video(text)
            with open(video_filename, 'rb') as video_file:
                await update.message.reply_video(video=video_file)
            os.remove(video_filename)
        except ValueError as e:
            await update.message.reply_text(str(e))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ.")

    elif music_pattern.match(text):
        try:
            audio_filename = download_music(text)
            with open(audio_filename, 'rb') as audio_file:
                await update.message.reply_audio(audio=audio_file, title=text)
            os.remove(audio_filename)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—É–∑—ã–∫—É.")


def main():
    token = os.getenv("TOKEN")
    application = ApplicationBuilder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("users", get_users_count))
    application.add_handler(CommandHandler("start", start_command))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()