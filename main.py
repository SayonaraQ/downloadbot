import os
import re
import logging
import glob
import subprocess
import shutil
import http.cookiejar as cookiejar
import requests
from asyncio import Semaphore
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters
from yt_dlp import YoutubeDL
from dotenv import load_dotenv

load_dotenv()

RU_PROXY = os.getenv("RU_PROXY")
YA_COOKIES_FILE = os.getenv("YA_COOKIES_FILE")
VK_COOKIES_FILE = os.getenv("VK_COOKIES_FILE")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

ADMIN_ID = int(os.getenv("ADMIN_ID"))

USERS_FILE = "data/users.txt"

sema = Semaphore(5)

def auto_update_ytdlp() -> None:
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è yt-dlp‚Ä¶")
        subprocess.run(
            [os.sys.executable, "-m", "pip", "install", "-U", "yt-dlp"],
            check=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE
        )
        if shutil.which("ffmpeg") is None:
            logger.warning("ffmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH ‚Äî –∞—É–¥–∏–æ-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å yt-dlp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {e}")

def ytdlp_opts_base(outtmpl: str | None = None, proxy: str | None = None, cookiefile: str | None = None) -> dict:
    opts = {
        'quiet': True,
        'nocheckcertificate': True,
        'outtmpl': outtmpl or '%(title)s.%(ext)s',
    }
    if proxy:
        opts['proxy'] = proxy
        opts['geo_verification_proxy'] = proxy
    if cookiefile and os.path.exists(cookiefile):
        opts['cookiefile'] = cookiefile
    return opts

def save_user(chat_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç."""
    try:
        if not os.path.exists(USERS_FILE):
            open(USERS_FILE, "w").close()

        with open(USERS_FILE, "a+") as file:
            file.seek(0)
            users = file.read().splitlines()
            if str(chat_id) not in users:
                file.write(f"{chat_id}\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

async def start_command(update: Update, context):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è –ó–∞–≥—Ä—É–∂–∞—Ç–µ–ª—å!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ Reels –∏–∑ Instagram ‚Äî –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–±–µ –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç.\n\n"
        "–Ø —É–º–µ—é –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑:\n"
        "üìå Instagram\n"
        "üìå YouTube\n"
        "üìå TikTok\n"
        "üìå VK Clips\n\n"
        "–ê –µ—â—ë ‚Äî –º–æ–≥—É –Ω–∞–π—Ç–∏ –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –º—É–∑—ã–∫—É, –µ—Å–ª–∏ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ`\n\n"
        "–Ø —Ç–∞–∫ –∂–µ —Ä–∞–±–æ—Ç–∞—é –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö, –¥–ª—è —ç—Ç–æ–≥–æ –º–Ω–µ –Ω—É–∂–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π.",
        parse_mode='Markdown'
    )

async def get_users_count(update: Update, context):
    if update.message.chat_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        if not os.path.exists(USERS_FILE):
            users_count = 0
        else:
            with open(USERS_FILE, "r") as file:
                users_count = len(file.readlines())

        await update.message.reply_text(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á—ë—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

def get_video_info(url: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –±–µ–∑ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    ydl_opts = {
        'quiet': True,
        'simulate': True,  # –ù–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ
        'skip_download': True,
    }
    with YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(url, download=False)
    return info_dict

def download_video(url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞."""
    info_dict = get_video_info(url)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ
    max_duration = 600  # 10 –º–∏–Ω—É—Ç
    if info_dict.get('duration', 0) > max_duration:
        raise ValueError(f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º: {max_duration // 60} –º–∏–Ω—É—Ç.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ
    max_size_mb = 48  # –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (MB)
    file_size_bytes = info_dict.get('filesize') or info_dict.get('filesize_approx')

    if file_size_bytes:
        file_size_mb = file_size_bytes / (1024 * 1024)
        if file_size_mb > max_size_mb:
            raise ValueError(f"–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ {file_size_mb:.2f}MB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç {max_size_mb}MB!")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    video_id = info_dict['id']
    outtmpl = f"{video_id}.%(ext)s"

    ydl_opts = {
        'format': 'best',
        'outtmpl': outtmpl,
        'quiet': True,
    }

    with YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    downloaded_files = glob.glob(f"{video_id}.*")
    if not downloaded_files:
        raise FileNotFoundError(f"–§–∞–π–ª {video_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏.")

    return downloaded_files[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É

def download_music(query: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –º—É–∑—ã–∫—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ MP3 (–ø–æ–∏—Å–∫ –Ω–∞ YouTube)."""
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': '%(title)s.%(ext)s',
        'quiet': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }
    with YoutubeDL(ydl_opts) as ydl:
        try:
            info_dict = ydl.extract_info(f"ytsearch:{query}", download=True)
            if not info_dict.get('entries'):
                raise Exception("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

            audio_filename = ydl.prepare_filename(info_dict['entries'][0]) \
                .replace(".webm", ".mp3").replace(".m4a", ".mp3")
            return audio_filename
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º—É–∑—ã–∫–∏: {e}")
            raise

YANDEX_URL_RE = re.compile(r'https?://(?:(?:www|m)\.)?music\.yandex\.(?:ru|by|kz|ua)/', re.I)
VK_AUDIO_URL_RE = re.compile(r'https?://(?:(?:www|m)\.)?vk\.com/(?:audio|music)', re.I)

def _resolve_yandex_album_track_url(url: str, proxy: str | None, cookiefile: str | None) -> str:
    """
    /track/<id> ‚Üí /album/<album_id>/track/<id> –ø–æ og:url/canonical.
    –ï—Å–ª–∏ –Ω–µ –≤—ã–π–¥–µ—Ç, –≤–µ—Ä–Ω—ë–º –∏—Å—Ö–æ–¥–Ω—ã–π url.
    """
    try:
        if "/album/" in url and "/track/" in url:
            return url
        if not re.search(r"/track/\d+", url):
            return url

        session = requests.Session()
        headers = {"User-Agent": "Mozilla/5.0", "Referer": "https://music.yandex.ru/"}
        proxies = {"http": proxy, "https": proxy} if proxy else None

        if cookiefile and os.path.exists(cookiefile):
            cj = cookiejar.MozillaCookieJar()
            cj.load(cookiefile, ignore_expires=True, ignore_discard=True)
            session.cookies = cj

        html = session.get(url, headers=headers, proxies=proxies, timeout=15).text

        # og:url
        m = re.search(
            r'<meta[^>]+property=["\']og:url["\'][^>]+content=["\'](https://music\.yandex\.(?:ru|by|kz|ua)/album/\d+/track/\d+)',
            html, re.I)
        if m:
            return m.group(1)

        # canonical
        m = re.search(
            r'<link[^>]+rel=["\']canonical["\'][^>]+href=["\'](https://music\.yandex\.(?:ru|by|kz|ua)/album/\d+/track/\d+)',
            html, re.I)
        if m:
            return m.group(1)
    except Exception:
        pass
    return url

def download_audio_by_url(url: str) -> str:
    import re
    import http.cookiejar as cookiejar
    import requests

    is_yandex = bool(YANDEX_URL_RE.search(url))
    is_vk_audio = bool(VK_AUDIO_URL_RE.search(url))

    cookiefile = None
    proxy = None

    if is_yandex:
        cookiefile = YA_COOKIES_FILE
        proxy = RU_PROXY  # –¥–ª—è –Ø–ú—É–∑—ã–∫–∏ —Ö–æ–¥–∏–º —á–µ—Ä–µ–∑ RU-–ø—Ä–æ–∫—Å–∏
    elif is_vk_audio:
        cookiefile = VK_COOKIES_FILE or None
        proxy = RU_PROXY  # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Ç–æ–∂–µ —á–µ—Ä–µ–∑ RU

    # ---- –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Å—ã–ª–∫—É –Ø–ú—É–∑—ã–∫–∏ /track/<id> -> /album/<album_id>/track/<id> ----
    if is_yandex and "/track/" in url and "/album/" not in url:
        try:
            sess = requests.Session()
            headers = {"User-Agent": "Mozilla/5.0", "Referer": "https://music.yandex.ru/"}
            proxies = {"http": proxy, "https": proxy} if proxy else None
            if cookiefile and os.path.exists(cookiefile):
                cj = cookiejar.MozillaCookieJar()
                cj.load(cookiefile, ignore_expires=True, ignore_discard=True)
                sess.cookies = cj
            html = sess.get(url, headers=headers, proxies=proxies, timeout=15).text
            # og:url
            m = re.search(
                r'<meta[^>]+property=["\']og:url["\'][^>]+content=["\'](https://music\.yandex\.(?:ru|by|kz|ua)/album/\d+/track/\d+)',
                html, re.I)
            if m:
                url = m.group(1)
            else:
                # canonical
                m = re.search(
                    r'<link[^>]+rel=["\']canonical["\'][^>]+href=["\'](https://music\.yandex\.(?:ru|by|kz|ua)/album/\d+/track/\d+)',
                    html, re.I)
                if m:
                    url = m.group(1)
        except Exception:
            pass

    # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ç—Ä–µ–∫ ‚Äî –±–µ–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞; –∞–ª—å–±–æ–º/–ø–ª–µ–π–ª–∏—Å—Ç ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
    noplaylist = "/track/" in url

    ydl_opts = ytdlp_opts_base(outtmpl="%(title)s.%(ext)s", proxy=proxy, cookiefile=cookiefile)
    ydl_opts.update({
        "format": "bestaudio/best",
        "postprocessors": [{
            "key": "FFmpegExtractAudio",
            "preferredcodec": "mp3",
            "preferredquality": "192",
        }],
        "noplaylist": noplaylist,
        "yesplaylist": not noplaylist,
        # —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Å–µ—Ç–∏
        "retries": 10,
        "fragment_retries": 10,
        "extractor_retries": 3,
        "concurrent_fragment_downloads": 4,
    })

    # –î–ª—è –Ø–ú—É–∑—ã–∫–∏ –ø–æ–ª–µ–∑–Ω–æ —É–∫–∞–∑–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if is_yandex:
        ydl_opts.setdefault("http_headers", {})
        ydl_opts["http_headers"].update({
            "Referer": "https://music.yandex.ru/",
            "User-Agent": "Mozilla/5.0",
        })

    with YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=True)

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç/–∞–ª—å–±–æ–º ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–∂–Ω–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
        entry = info["entries"][0] if isinstance(info, dict) and info.get("entries") else info

        # –ò–º—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –ø–æ—Å—Ç–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (mp3)
        prepared = ydl.prepare_filename(entry)
        audio_filename = (prepared
                          .replace(".webm", ".mp3")
                          .replace(".m4a", ".mp3")
                          .replace(".opus", ".mp3"))

        if not os.path.exists(audio_filename):
            candidates = glob.glob("*.mp3")
            if not candidates:
                raise FileNotFoundError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Ç–æ–≥–æ–≤—ã–π MP3.")
            audio_filename = max(candidates, key=os.path.getmtime)

    return audio_filename

async def handle_message(update: Update, context):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ/–º—É–∑—ã–∫—É."""
    if update.message is None or update.message.text is None:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    text = update.message.text
    chat_id = update.message.chat_id

    save_user(chat_id)  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    instagram_pattern = re.compile(r'https?://(www\.)?instagram\.com')
    tiktok_pattern = re.compile(r'https?://(www\.)?tiktok\.com|https?://vt\.tiktok\.com')
    youtube_pattern = re.compile(r'https?://(www\.)?youtube\.com|https?://youtu\.be')
    vk_pattern = re.compile(r'https?://(www\.)?vk\.com|https?://vk\.cc|https?://vkvideo\.ru')

    music_pattern = re.compile(r'^(\w{2,}(\s+\w{2,}){0,3})\s+-\s+(\w{2,}(\s+\w{2,}){0,3})$')

    async with sema:
        if YANDEX_URL_RE.search(text) or VK_AUDIO_URL_RE.search(text):
            audio_filename = None
            try:
                audio_filename = download_audio_by_url(text)
                from os.path import basename, splitext
                with open(audio_filename, "rb") as audio_file:
                    await update.message.reply_audio(
                        audio=audio_file,
                        title=splitext(basename(audio_filename))[0],
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {e}")
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—É–∑—ã–∫—É.")
            finally:
                if audio_filename and os.path.exists(audio_filename):
                    os.remove(audio_filename)
            return

        if (instagram_pattern.match(text) or tiktok_pattern.match(text) or
            youtube_pattern.match(text) or vk_pattern.match(text)):
            try:
                video_filename = download_video(text)
                with open(video_filename, 'rb') as video_file:
                    await update.message.reply_video(video=video_file)
                os.remove(video_filename)
            except ValueError as e:
                await update.message.reply_text(str(e))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {e}")
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ.")

        elif music_pattern.match(text):
            try:
                audio_filename = download_music(text)
                with open(audio_filename, 'rb') as audio_file:
                    await update.message.reply_audio(audio=audio_file, title=text)
                os.remove(audio_filename)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞: {e}")
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º—É–∑—ã–∫—É.")

def main():
    auto_update_ytdlp()

    token = os.getenv("TOKEN")
    application = ApplicationBuilder().token(token).build()

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CommandHandler("users", get_users_count))
    application.add_handler(CommandHandler("start", start_command))

    application.run_polling()

if __name__ == "__main__":
    main()
